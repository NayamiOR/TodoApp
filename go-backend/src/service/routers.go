/*
 * TodoApp
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package service

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex GET, POST etc.
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	return NewRouterWithGinEngine(gin.Default(), handleFunctions)
}

// NewRouterWithGinEngine NewRouter add routes to existing gin engine.
func NewRouterWithGinEngine(router *gin.Engine, handleFunctions ApiHandleFunctions) *gin.Engine {
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the PomosAPI part of the API
	PomosAPI PomosAPI
	// Routes for the TodosAPI part of the API
	TodosAPI TodosAPI
	// Routes for the UsersAPI part of the API
	UsersAPI UsersAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{
		{
			"ApiPomosActiveGet",
			http.MethodGet,
			"/api/pomos/active",
			handleFunctions.PomosAPI.ApiPomosActiveGet,
		},
		{
			"ApiPomosHistoryGet",
			http.MethodGet,
			"/api/pomos/history",
			handleFunctions.PomosAPI.ApiPomosHistoryGet,
		},
		{
			"ApiPomosPomoIdCancelPost",
			http.MethodPost,
			"/api/pomos/:pomo_id/cancel",
			handleFunctions.PomosAPI.ApiPomosPomoIdCancelPost,
		},
		{
			"ApiPomosPomoIdCompletePost",
			http.MethodPost,
			"/api/pomos/:pomo_id/complete",
			handleFunctions.PomosAPI.ApiPomosPomoIdCompletePost,
		},
		{
			"ApiPomosPomoIdDelete",
			http.MethodDelete,
			"/api/pomos/:pomo_id",
			handleFunctions.PomosAPI.ApiPomosPomoIdDelete,
		},
		{
			"ApiPomosPomoIdGet",
			http.MethodGet,
			"/api/pomos/:pomo_id",
			handleFunctions.PomosAPI.ApiPomosPomoIdGet,
		},
		{
			"ApiPomosStartPost",
			http.MethodPost,
			"/api/pomos/start",
			handleFunctions.PomosAPI.ApiPomosStartPost,
		},
		{
			"ApiTodosGet",
			http.MethodGet,
			"/api/todos",
			handleFunctions.TodosAPI.ApiTodosGet,
		},
		{
			"ApiTodosPost",
			http.MethodPost,
			"/api/todos",
			handleFunctions.TodosAPI.ApiTodosPost,
		},
		{
			"ApiTodosTodoIdDelete",
			http.MethodDelete,
			"/api/todos/:todo_id",
			handleFunctions.TodosAPI.ApiTodosTodoIdDelete,
		},
		{
			"ApiTodosTodoIdGet",
			http.MethodGet,
			"/api/todos/:todo_id",
			handleFunctions.TodosAPI.ApiTodosTodoIdGet,
		},
		{
			"ApiTodosTodoIdPut",
			http.MethodPut,
			"/api/todos/:todo_id",
			handleFunctions.TodosAPI.ApiTodosTodoIdPut,
		},
		{
			"ApiTodosTodoIdStatusPut",
			http.MethodPut,
			"/api/todos/:todo_id/status",
			handleFunctions.TodosAPI.ApiTodosTodoIdStatusPut,
		},
		{
			"ApiTodosTodoIdSubtasksDelete",
			http.MethodDelete,
			"/api/todos/:todo_id/subtasks",
			handleFunctions.TodosAPI.ApiTodosTodoIdSubtasksDelete,
		},
		{
			"ApiTodosTodoIdSubtasksPost",
			http.MethodPost,
			"/api/todos/:todo_id/subtasks",
			handleFunctions.TodosAPI.ApiTodosTodoIdSubtasksPost,
		},
		{
			"ApiUsersMeDelete",
			http.MethodDelete,
			"/api/users/me",
			handleFunctions.UsersAPI.ApiUsersMeDelete,
		},
		{
			"ApiUsersMeGet",
			http.MethodGet,
			"/api/users/me",
			handleFunctions.UsersAPI.ApiUsersMeGet,
		},
		{
			"ApiUsersMePut",
			http.MethodPut,
			"/api/users/me",
			handleFunctions.UsersAPI.ApiUsersMePut,
		},
		{
			"ApiUsersPost",
			http.MethodPost,
			"/api/users",
			handleFunctions.UsersAPI.ApiUsersPost,
		},
	}
}
